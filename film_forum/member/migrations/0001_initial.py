# Generated by Django 5.0.2 on 2024-04-27 17:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Movies',
            fields=[
                ('mid', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.CharField(max_length=255)),
                ('year', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('rating', models.IntegerField(default=-1)),
            ],
            options={
                'db_table': 'Movies',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('rid', models.AutoField(primary_key=True, serialize=False)),
                ('rtype', models.IntegerField(choices=[(1, 'score'), (2, 'hot')])),
            ],
            options={
                'db_table': 'Rank',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('img', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('art_id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField()),
                ('title', models.CharField(max_length=255)),
                ('conent', models.TextField()),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.movies')),
            ],
            options={
                'db_table': 'Article',
                'managed': True,
                'unique_together': {('mid', 'art_id')},
            },
        ),
        migrations.CreateModel(
            name='Chatroom',
            fields=[
                ('aid', models.AutoField(primary_key=True, serialize=False)),
                ('be_uid', models.IntegerField()),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Chatroom',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Browse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('browseTime', models.DateTimeField()),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.movies')),
            ],
            options={
                'db_table': 'Browse',
                'managed': True,
                'unique_together': {('uid', 'browseTime', 'mid')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='history_browse',
            field=models.ManyToManyField(through='member.Browse', to='member.movies'),
        ),
        migrations.AddField(
            model_name='movies',
            name='rid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.rank'),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('conent', models.TextField()),
                ('aid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.chatroom')),
            ],
            options={
                'db_table': 'Message',
                'managed': True,
                'unique_together': {('aid', 'time')},
            },
        ),
        migrations.CreateModel(
            name='MovieComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Comment_id', models.IntegerField()),
                ('content', models.CharField(max_length=255)),
                ('score', models.IntegerField()),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='member.movies')),
            ],
            options={
                'db_table': 'MovieComment',
                'managed': True,
                'unique_together': {('mid', 'Comment_id')},
            },
        ),
        migrations.CreateModel(
            name='LikeMovies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.movies')),
            ],
            options={
                'db_table': 'LikeMovies',
                'managed': True,
                'unique_together': {('uid', 'mid')},
            },
        ),
        migrations.CreateModel(
            name='ArticleComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('conent', models.TextField()),
                ('art_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.article')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='member.movies')),
            ],
            options={
                'db_table': 'ArticleComment',
                'managed': True,
                'unique_together': {('uid', 'time')},
            },
        ),
        migrations.CreateModel(
            name='MPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference', models.CharField(max_length=255)),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'MPreference',
                'managed': True,
                'unique_together': {('uid', 'preference')},
            },
        ),
    ]
